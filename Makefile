export PATH := $(PATH):/usr/local/go/bin

OUT_BIN = ninit
DOCKER_IMAGE = golang:1.16.1-alpine

CP_BIN ?= cp
DOCKER_BIN ?= docker
ENV_BIN ?= env
FIND_BIN ?= find
GO_BIN ?= go
LINT_BIN ?= golangci-lint
MKDIR_BIN ?= mkdir
TOUCH_BIN ?= touch

BUILD_VERSION ?= $(shell git describe --always --dirty --broken --abbrev=8)
BUILT_TIME ?= $(shell date +%Y-%m-%dT%H:%M:%S%z)

all: clean lint build

build:
	$(file > version.autogenerated,$(BUILD_VERSION))
	$(file > buildTime.autogenerated,$(BUILT_TIME))

	$(MKDIR_BIN) -p bin
	$(GO_BIN) mod tidy
	# https://golang.org/cmd/link/
	$(ENV_BIN) CGO_ENABLED=0 GOOS=linux $(GO_BIN) build -ldflags '-s -w -extldflags "-static"' -o bin/$(OUT_BIN) -v

dev:
	$(file > version.autogenerated,$(addsuffix -dev,$(BUILD_VERSION)))
	$(file > buildTime.autogenerated,$(BUILT_TIME))

	$(MKDIR_BIN) -p bin
	$(CP_BIN) -a hack/Dockerfile bin/Dockerfile
	$(DOCKER_BIN) pull $(DOCKER_IMAGE)
	$(DOCKER_BIN) rm --force build || true
	$(DOCKER_BIN) run --detach --tty --rm --network host --name build --hostname build \
	  --mount type=bind,source="$(CURDIR)/",target=/build $(DOCKER_IMAGE)
	$(DOCKER_BIN) exec build apk update
	$(DOCKER_BIN) exec build apk add gcc musl-dev
	$(DOCKER_BIN) exec --workdir=/build --env=GOOS=linux build go mod tidy
	$(DOCKER_BIN) exec --workdir=/build --env=GOOS=linux build go build -race -o bin/$(OUT_BIN) -v
	$(DOCKER_BIN) exec --workdir=/build build cc -static hack/zombie.c -o bin/zombie
	$(DOCKER_BIN) stop build

update:
	$(GO_BIN) mod tidy
	$(ENV_BIN) GOPROXY=direct GOPRIVATE=github.com/s3rj1k/* $(GO_BIN) get -u
	$(GO_BIN) get -u github.com/golangci/golangci-lint/cmd/golangci-lint@v1.38.0

clean:
	$(GO_BIN) clean
	$(FIND_BIN) bin -type f -delete || true
	$(FIND_BIN) . -type d -empty -delete
	$(FIND_BIN) . -type f -name "*.autogenerated" -delete

test:
	$(GO_BIN) test -failfast ./...

lint:
	$(TOUCH_BIN) version.autogenerated buildTime.autogenerated
	$(LINT_BIN) run ./...
