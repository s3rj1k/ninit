export PATH := $(PATH):/usr/local/go/bin

DOCKER_IMAGE = golang:1.16.2-alpine
DOCKER_IMAGE_PKGS = findutils git gcc make musl-dev

PROGS = $(strip $(shell $(FIND_BIN) cmd -mindepth 1 -maxdepth 1 -type d -printf '%P '))

LINT_BIN ?= golangci-lint
LINT_VER ?= 1.38.0

CD_BIN ?= cd
CP_BIN ?= cp
DATE_BIN ?= date
DIRNAME_BIN ?= dirname
DOCKER_BIN ?= docker
ENV_BIN ?= env
FIND_BIN ?= find
GIT_BIN ?= git
GO_BIN ?= go
MAKE_BIN ?= make
MKDIR_BIN ?= mkdir
PRINTF_BIN ?= printf
TAR_BIN ?= tar
WGET_BIN ?= wget
REALPATH ?= realpath

VERSION_PATH = pkg/version/.autogenerated
BUILD_VERSION ?= $(shell $(GIT_BIN) describe --always --dirty --broken --abbrev=8)
BUILT_TIME ?= $(shell $(DATE_BIN) +%Y-%m-%dT%H:%M:%S%z)

PROJECT_DIR := $(shell $(DIRNAME_BIN) "$(shell $(REALPATH) $(firstword $(MAKEFILE_LIST)))")

all: clean lint build-prod

.PHONY: pre
pre:
	$(CD_BIN) "$(PROJECT_DIR)"
	$(MKDIR_BIN) -p bin/prod bin/dev $(VERSION_PATH)
	$(CP_BIN) -a hack/Dockerfile bin/dev/Dockerfile
	$(PRINTF_BIN) "$(BUILD_VERSION)" > $(VERSION_PATH)/version
	$(PRINTF_BIN) "$(BUILT_TIME)" > $(VERSION_PATH)/buildTime

.PHONY: tidy
tidy:
	$(GO_BIN) mod tidy

.PHONY: build-prod
# https://golang.org/cmd/link/
build-prod: pre tidy
	$(CD_BIN) "$(PROJECT_DIR)"
	for PROG in $(PROGS); do \
		$(CD_BIN) "$(PROJECT_DIR)/cmd/$$PROG" && \
		  $(ENV_BIN) CGO_ENABLED=0 GOOS=linux $(GO_BIN) build -ldflags '-s -w -extldflags "-static"' -o "$(PROJECT_DIR)/bin/prod/$$PROG" -v && \
		    $(CD_BIN) "$(PROJECT_DIR)"; \
	done

.PHONY: build-dev
build-dev: pre tidy
	$(CD_BIN) "$(PROJECT_DIR)"
	for PROG in $(PROGS); do \
		$(CD_BIN) "$(PROJECT_DIR)/cmd/$$PROG" && \
		  $(GO_BIN) build -race -o "$(PROJECT_DIR)/bin/dev/$$PROG" -v && \
		    $(CD_BIN) "$(PROJECT_DIR)"; \
	done; \
	cc -static hack/zombie.c -o bin/dev/zombie

.PHONY: docker
docker: pre tidy
	$(CD_BIN) "$(PROJECT_DIR)"
	$(DOCKER_BIN) pull $(DOCKER_IMAGE)
	$(DOCKER_BIN) rm --force build || true
	$(DOCKER_BIN) run --detach --tty --rm --network host --name build --hostname build \
	  --mount type=bind,source="$(CURDIR)/",target=/build $(DOCKER_IMAGE)
	$(DOCKER_BIN) exec build sh -c "apk update && apk add $(DOCKER_IMAGE_PKGS)"
	$(DOCKER_BIN) exec --workdir=/build build make build-dev
	$(DOCKER_BIN) exec --workdir=/build build make build-prod
	$(DOCKER_BIN) stop build

.PHONY: update
update: pre
	$(CD_BIN) "$(PROJECT_DIR)"
	for PROG in $(PROGS); do \
		$(CD_BIN) "$(PROJECT_DIR)/cmd/$$PROG" && \
		  $(ENV_BIN) GOPROXY=direct GOPRIVATE=github.com/s3rj1k/* $(GO_BIN) get -u && \
		    $(CD_BIN) "$(PROJECT_DIR)"; \
	done; \
	$(CD_BIN) "$(PROJECT_DIR)"
	$(WGET_BIN) -qO- https://github.com/golangci/golangci-lint/releases/download/v$(LINT_VER)/golangci-lint-$(LINT_VER)-linux-amd64.tar.gz | \
	  $(TAR_BIN) xvz --strip-components=1 --wildcards --no-anchored -C `$(GO_BIN) env GOPATH`/bin '*/golangci-lint'
	$(MAKE_BIN) tidy

.PHONY: clean
clean:
	$(CD_BIN) "$(PROJECT_DIR)"
	$(GO_BIN) clean
	$(FIND_BIN) bin -type f -delete || true
	$(FIND_BIN) $(VERSION_PATH)/ -type f -delete || true
	$(FIND_BIN) . -type d -empty -delete

.PHONY: test
test: pre tidy
	$(CD_BIN) "$(PROJECT_DIR)"
	$(GO_BIN) test -failfast ./...

.PHONY: lint
lint: pre tidy
	$(CD_BIN) "$(PROJECT_DIR)"
	$(LINT_BIN) -v run --sort-results ./...
